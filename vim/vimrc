set encoding=utf-8
set nocompatible
set wildmenu
set ruler

syntax enable

set autoindent
nnoremap <C-i> :set paste!<CR>

set number
set relativenumber
nnoremap <C-n> :set rnu!<CR>

set splitright
set splitbelow

set ignorecase
set smartcase
set hlsearch
set incsearch
vnoremap <C-h> :nohlsearch<CR>
nnoremap <C-h> :nohlsearch<CR>

set undofile
set undodir=~/.vim/undo-history

set mouse=a

set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
noremap <F6> :set list!<CR>

set hidden
set signcolumn=yes
set scrolloff=8
set sidescrolloff=8
set nowrap
let mapleader = "\<space>"

nmap <leader>Q :bufdo bdelete<CR>
map gf :edit <cfile><CR>
nmap <leader>f :Files<CR>
nmap <leader>F :GFiles<CR>
nmap <leader>b :Buffers<CR>

"python settings
autocmd FileType python setlocal shiftwidth=4 softtabstop=4 expandtab commentstring=#\ %s

"markdown settings
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 expandtab

"javascript settings
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType typescript setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType typescriptreact setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType javascriptreact setlocal shiftwidth=2 softtabstop=2 expandtab

"Git commit settings
autocmd FileType gitcommit setlocal tw=72

"keymappings
nnoremap Y y$
" quicker window movement
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-h> <C-w>h
nnoremap <M-l> <C-w>l

"netrw explorer
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
let g:netrw_preview = 1

"colorscheme

set background=dark
colorscheme solarized
so ~/.vim/autoload/togglebg.vim
" Workaround a problem with solarized and vim-gitgutter.
" https://github.com/airblade/vim-gitgutter/issues/696
highlight! link SignColumn LineNr
autocmd ColorScheme * highlight! link SignColumn LineNr

"ultisnips
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"

"YouCompleteMe
let g:ycm_autoclose_preview_window_after_insertion = 1

"fzf
set rtp+=~/.fzf

"CoC
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>rn <Plug>(coc-rename)
nmap <leader>a :CocAction<CR>
imap <silent> <M-.> <Plug>(copilot-next)
imap <silent> <M-,> <Plug>(copilot-previous)

let g:AutoPairsFlyMode = 1

let g:EditorConfig_exclude_patterns = ['fugitive://.*']
au FileType gitcommit let b:EditorConfig_disable = 1

"vim-plug
call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'chaoren/vim-wordmotion'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-repeat'
Plug 'airblade/vim-gitgutter'
Plug 'github/copilot.vim'
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
Plug 'fannheyward/coc-pyright', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile'}
Plug 'jiangmiao/auto-pairs'
Plug 'editorconfig/editorconfig-vim'
Plug 'unblevable/quick-scope'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Initialize plugin system
call plug#end()


lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "python", "javascript" },
  sync_install = false,
  auto_install = true,
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = true,
  },
}
EOF
