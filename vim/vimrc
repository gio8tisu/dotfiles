set encoding=utf-8
set nocompatible
set wildmenu
set ruler

syntax enable

set autoindent
nnoremap <C-i> :set paste!<CR>

set number
set relativenumber
nnoremap <C-n> :set rnu!<CR>

set splitright
set splitbelow

set ignorecase
set smartcase
set hlsearch
set incsearch
vnoremap <C-h> :set hlsearch!<CR>
nnoremap <C-h> :set hlsearch!<CR>

set undofile
set undodir=~/.vim/undo-history

set mouse=a

set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
noremap <F6> :set list!<CR>

set hidden
set signcolumn=yes
set scrolloff=8
set sidescrolloff=8
set nowrap
let mapleader = "\<space>"

nmap <leader>Q :bufdo bdelete<CR>
map gf :edit <cfile><CR>
nmap <leader>ff :Files<CR>
nmap <leader>fg :GFiles<CR>
nmap <leader>fb :Buffers<CR>

"python settings
autocmd FileType python setlocal shiftwidth=4 softtabstop=4 expandtab commentstring=#\ %s

"markdown settings
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 expandtab

"javascript settings
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType typescript setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType typescriptreact setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType javascriptreact setlocal shiftwidth=2 softtabstop=2 expandtab

"Git commit settings
autocmd FileType gitcommit setlocal tw=72

"keymappings
nnoremap Y y$
nnoremap d} dV}
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>
inoremap <C-s> <C-O>:update<CR>
nnoremap <C-s> :update<CR>
" quicker window movement
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-h> <C-w>h
nnoremap <M-l> <C-w>l

"netrw explorer
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
let g:netrw_preview = 1

"ultisnips
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>rn <Plug>(coc-rename)
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac <Plug>(coc-codeaction)
nmap <leader>qf <Plug>(coc-fix-current)

imap <silent> <M-.> <Plug>(copilot-next)
imap <silent> <M-,> <Plug>(copilot-previous)

let g:AutoPairsFlyMode = 1

let g:EditorConfig_exclude_patterns = ['fugitive://.*']
au FileType gitcommit let b:EditorConfig_disable = 1

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

"vim-plug
call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'chaoren/vim-wordmotion'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-repeat'
Plug 'airblade/vim-gitgutter'
Plug 'github/copilot.vim'
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
Plug 'fannheyward/coc-pyright', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile'}
Plug 'jiangmiao/auto-pairs'
Plug 'editorconfig/editorconfig-vim'
Plug 'unblevable/quick-scope'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

" Initialize plugin system
call plug#end()


lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "python", "javascript" },
  sync_install = false,
  auto_install = true,
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = true,
  },
}
EOF

"colorscheme
augroup qs_colors
  autocmd!
  autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' ctermfg=155
  autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' ctermfg=81
augroup END
set background=light
colorscheme tokyonight
so ~/.vim/autoload/togglebg.vim

"tree-sitter folding
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevelstart=99

lua << EOF
require'treesitter-context'.setup {
    enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
    max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
    trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
    patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
        -- For all filetypes
        -- Note that setting an entry here replaces all other patterns for this entry.
        -- By setting the 'default' entry below, you can control which nodes you want to
        -- appear in the context window.
        default = {
            'class',
            'function',
            'method',
            'for',
            'while',
            'if',
            'switch',
            'case',
        },
        -- Patterns for specific filetypes
        -- If a pattern is missing, *open a PR* so everyone can benefit.
        rust = {
            'impl_item',
            'struct',
            'enum',
        },
        markdown = {
            'section',
        },
    },

    -- [!] The options below are exposed but shouldn't require your attention,
    --     you can safely ignore them.
    zindex = 20, -- The Z-index of the context window
    mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
    -- Separator between context and content. Should be a single character string, like '-'.
    -- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
    separator = nil,
}
EOF
